// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phoneNumber String?
  role      Role     @default(STUDENT)
  profileImage String? // URL to profile image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Add relationship to courses (if users can create courses)
  courses   Course[] @relation("UserCourses")
  // Add relationship to announcements (if users can create announcements)
  announcements Announcement[] @relation("UserAnnouncements")
  // Support and e-commerce relationships
  supportTickets SupportTicket[] @relation("UserSupportTickets")
  orders        Order[] @relation("UserOrders")
  passwordResets PasswordReset[] @relation("UserPasswordResets")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String?
  instructorId String?
  instructor  User?     @relation("UserCourses", fields: [instructorId], references: [id])
  instructorName String?
  // Video fields for course demo video
  demoVideoId String?
  demoVideoUrl String?
  demoVideoThumbnail String?
  demoVideoDuration Int?
  courseDuration String?
  level Level @default(BEGINNER)
  category Category @default(BARTENDING)
  lessons     Lesson[]
  materials   Material[]
  announcements Announcement[] @relation("CourseAnnouncements")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  coursePricings CoursePricing[]
  orderItems     OrderItem[] @relation("CourseOrders")
}

model Pricing {
  id String @id @default(uuid())
  price Float
  country String

  coursePricings CoursePricing[]
}

model CoursePricing {
  id         String   @id @default(uuid())
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  pricing    Pricing  @relation(fields: [pricingId], references: [id])
  pricingId  String

  @@unique([courseId, pricingId]) // Optional: prevents duplicate entries
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  content     String?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videoId     String?
  videoUrl    String?
  videoThumbnail String?
  videoDuration Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // One-to-many relationship with materials
  materials   Material[]
}

model Material {
  id          String   @id @default(uuid())
  title       String
  fileUrl     String?
  courseId    String
  lessonId    String?  // Foreign key to lesson
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Custom role management for extended functionality
model RoleManagement {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String[] // JSON array of permissions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Category {
  BARTENDING
  MIXOLOGY
  COCKTAILS
  WINE
  BEER
}

enum AnnouncementType {
  ALL_USERS
  PUBLIC_USERS
  REGISTERED_USERS
  COURSE_STUDENTS
  INSTRUCTORS
  SPECIFIC_ROLES
  SPECIFIC_USERS
  PROMOTIONAL
  SYSTEM_UPDATE
}

enum AnnouncementPriority {
  P1
  P2
  P3
}

enum AnnouncementCategory {
  GENERAL
  PROMOTION
  COURSE_UPDATE
  SYSTEM_MAINTENANCE
  NEW_FEATURE
  INSTRUCTOR_ANNOUNCEMENT
}

enum AnnouncementDisplayType {
  BANNER
  NOTIFICATION
  SIDEBAR
  EMAIL
  IN_APP
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String
  type        AnnouncementType
  priority    AnnouncementPriority @default(P3)
  category    AnnouncementCategory @default(GENERAL)
  displayType AnnouncementDisplayType @default(IN_APP)
  
  // Target fields based on type
  courseId    String?  // For COURSE_STUDENTS type
  course      Course?  @relation("CourseAnnouncements", fields: [courseId], references: [id], onDelete: Cascade)
  
  targetRoles String[] // For SPECIFIC_ROLES type - JSON array of role names
  targetUserIds String[] // For SPECIFIC_USERS type - JSON array of user IDs
  
  // Metadata
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  startsAt    DateTime? // When announcement should become visible
  createdBy   String
  creator     User     @relation("UserAnnouncements", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Enhanced features
  actionUrl   String?  // URL for clickable announcements
  actionText  String?  // Text for action button
  sendEmail   Boolean  @default(false) // Whether to send email notification
  showAsBanner Boolean @default(false) // Whether to show as banner on homepage
  imageUrl    String?  // Image URL for the announcement
  tags        String[] // Tags for categorizing announcements
}

// Support and Help models
model SupportTicket {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)
  subject     String
  message     String
  category    String   // BILLING, TECHNICAL, GENERAL, etc.
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  email       String?
  contactInfo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// E-commerce models
model Order {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  status      String   @default("PENDING") // PENDING, PAID, CANCELLED, REFUNDED
  totalAmount Float
  currency    String   @default("USD")
  paymentMethodId String?
  stripePaymentIntentId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems  OrderItem[]
}

model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course   @relation("CourseOrders", fields: [courseId], references: [id])
  price       Float
  createdAt   DateTime @default(now())
}

// Password reset model
model PasswordReset {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation("UserPasswordResets", fields: [userId], references: [id], onDelete: Cascade)
  token       String   @unique
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
}