generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  extensions   = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  name              String
  role              Role               @default(STUDENT)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  phoneNumber       String?
  profileImage      String?
  city              String?
  country           String?
  lastLoginAt       DateTime?
  lastLoginIp       String?
  region            String?
  timezone          String?
  announcements     Announcement[]     @relation("UserAnnouncements")
  cart              Cart?              @relation("UserCart")
  courses           Course[]           @relation("UserCourses")
  orders            Order[]            @relation("UserOrders")
  passwordResets    PasswordReset[]    @relation("UserPasswordResets")
  paymentUsers      PaymentUser[]      @relation("UserPaymentUser")
  supportTickets    SupportTicket[]    @relation("UserSupportTickets")
  enrollments       UserEnrollment[]   @relation("UserEnrollments")
  userSubscriptions UserSubscription[] @relation("UserSubscriptions")
  wishlist          Wishlist[]         @relation("UserWishlist")
  reviews           CourseReview[]     @relation("UserReviews")
}

model Course {
  id                 String           @id @default(uuid())
  title              String
  description        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  instructorId       String?
  instructorName     String?
  demoVideoDuration  Int?
  demoVideoId        String?
  demoVideoThumbnail String?
  demoVideoUrl       String?
  category           Category         @default(BARTENDING)
  courseDuration     String?
  level              Level            @default(BEGINNER)
  thumbnail          String?
  announcements      Announcement[]   @relation("CourseAnnouncements")
  cartItems          CartItem[]       @relation("CourseCart")
  instructor         User?            @relation("UserCourses", fields: [instructorId], references: [id])
  coursePricings     CoursePricing[]
  lessons            Lesson[]
  materials          Material[]
  orderItems         OrderItem[]      @relation("CourseOrders")
  PricingHistory     PricingHistory[]
  trendingCourses    TrendingCourse?  @relation("TrendingCourses")
  enrollments        UserEnrollment[] @relation("CourseEnrollments")
  wishlist           Wishlist[]       @relation("CourseWishlist")
  reviews            CourseReview[]   @relation("CourseReviews")
}

model CourseReview {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  rating    Int      // 1-5 stars
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  course    Course   @relation("CourseReviews", fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([courseId, userId]) // One review per user per course
  @@index([courseId])
  @@index([userId])
}

model Pricing {
  id             String          @id @default(uuid())
  price          Float
  country        String
  createdAt      DateTime        @default(now())
  currency       String?         @default("USD")
  discount       Float?
  isActive       Boolean         @default(true)
  originalPrice  Float?
  pricingTier    String?
  region         String?
  updatedAt      DateTime        @default(now())
  validFrom      DateTime        @default(now())
  validTo        DateTime?
  coursePricings CoursePricing[]

  @@index([country])
  @@index([country, region])
}

model CoursePricing {
  id        String   @id @default(uuid())
  courseId  String
  pricingId String
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  updatedAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  pricing   Pricing  @relation(fields: [pricingId], references: [id])

  @@index([courseId, isActive])
}

model Lesson {
  id             String     @id @default(uuid())
  title          String
  courseId       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  content        String?
  videoDuration  Int?
  videoId        String?
  videoThumbnail String?
  videoUrl       String?
  course         Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  materials      Material[]
}

model Material {
  id        String   @id @default(uuid())
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileUrl   String?
  title     String
  lessonId  String?
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model RoleManagement {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Announcement {
  id            String                  @id @default(uuid())
  title         String
  content       String
  type          AnnouncementType
  priority      AnnouncementPriority    @default(P3)
  courseId      String?
  targetRoles   String[]
  targetUserIds String[]
  isActive      Boolean                 @default(true)
  expiresAt     DateTime?
  createdBy     String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  actionText    String?
  actionUrl     String?
  category      AnnouncementCategory    @default(GENERAL)
  displayType   AnnouncementDisplayType @default(IN_APP)
  imageUrl      String?
  sendEmail     Boolean                 @default(false)
  showAsBanner  Boolean                 @default(false)
  startsAt      DateTime?
  tags          String[]
  course        Course?                 @relation("CourseAnnouncements", fields: [courseId], references: [id], onDelete: Cascade)
  creator       User                    @relation("UserAnnouncements", fields: [createdBy], references: [id])
}

model SupportTicket {
  id          String   @id @default(uuid())
  userId      String
  subject     String
  message     String
  category    String
  status      String   @default("OPEN")
  email       String?
  contactInfo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                    String           @id @default(uuid())
  userId                String
  status                String           @default("PENDING")
  totalAmount           Float
  currency              String           @default("USD")
  paymentMethodId       String?
  stripePaymentIntentId String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  country               String
  user                  User             @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  orderItems            OrderItem[]
  enrollments           UserEnrollment[] @relation("OrderEnrollments")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  courseId  String
  price     Float
  createdAt DateTime @default(now())
  course    Course   @relation("CourseOrders", fields: [courseId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserPasswordResets", fields: [userId], references: [id])
}

model FAQ {
  id        String   @id @default(uuid())
  title     String
  question  String
  answer    String
  index     Int      @unique @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactDetails {
  id        String   @id @default(uuid())
  type      String
  label     String
  value     String
  icon      String?
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, label])
}

model AvailableCountry {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String   @unique
  flag      String?
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrendingCourse {
  id        String   @id @default(uuid())
  courseId  String   @unique
  order     Int      @unique @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation("TrendingCourses", fields: [courseId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation("CourseWishlist", fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation("UserWishlist", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation("UserCart", fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  course    Course   @relation("CourseCart", fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([cartId, courseId])
}

model UserEnrollment {
  id             String   @id @default(uuid())
  userId         String
  courseId       String
  orderId        String?
  enrolledAt     DateTime @default(now())
  status         String   @default("ACTIVE")
  progress       Float    @default(0)
  lastAccessedAt DateTime @updatedAt
  course         Course   @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: Cascade)
  order          Order?   @relation("OrderEnrollments", fields: [orderId], references: [id])
  user           User     @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model PricingHistory {
  id           String   @id
  courseId     String
  oldPrice     Float
  newPrice     Float
  currency     String
  country      String
  region       String?
  changeReason String?
  changedBy    String?
  changedAt    DateTime @default(now())
  Course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([country, changedAt])
  @@index([courseId, changedAt])
}

model PaymentUser {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  userId      String
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserPaymentUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SubscriptionPlan {
  id                String             @id @default(uuid())
  name              String
  description       String?
  price             Float
  currency          String             @default("USD")
  interval          String
  intervalCount     Int                @default(1)
  stripePriceId     String?            @unique
  isActive          Boolean            @default(true)
  features          String[]
  maxCourses        Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userSubscriptions UserSubscription[]
}

model UserSubscription {
  id                   String                @id @default(cuid())
  userId               String
  stripeSubscriptionId String                @unique
  stripeCustomerId     String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean               @default(false)
  canceledAt           DateTime?
  endedAt              DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  subscriptionPlanId   String
  status               SubscriptionStatus    @default(ACTIVE)
  subscriptionPayments SubscriptionPayment[]
  subscriptionPlan     SubscriptionPlan      @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
  user                 User                  @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionPlanId])
  @@index([status])
}

model SubscriptionPayment {
  id                    String           @id @default(uuid())
  subscriptionId        String
  stripeInvoiceId       String?          @unique
  stripePaymentIntentId String?
  amount                Float
  currency              String           @default("USD")
  paidAt                DateTime?
  dueDate               DateTime?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  status                String
  subscription          UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Category {
  BARTENDING
  MIXOLOGY
  COCKTAILS
  WINE
  BEER
}

enum AnnouncementType {
  ALL_USERS
  COURSE_STUDENTS
  INSTRUCTORS
  SPECIFIC_ROLES
  SPECIFIC_USERS
  PUBLIC_USERS
  REGISTERED_USERS
  PROMOTIONAL
  SYSTEM_UPDATE
}

enum AnnouncementPriority {
  P1
  P2
  P3
}

enum AnnouncementCategory {
  GENERAL
  PROMOTION
  COURSE_UPDATE
  SYSTEM_MAINTENANCE
  NEW_FEATURE
  INSTRUCTOR_ANNOUNCEMENT
}

enum AnnouncementDisplayType {
  BANNER
  NOTIFICATION
  SIDEBAR
  EMAIL
  IN_APP
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAUSED
}
